Use SwaggerHub to auto generate initial structure --> able to choose OAuth2 options to be implemented.
Hub also monitors validity + docs as you code.

https://github.com/microsoft/api-guidelines/blob/vNext/azure/Guidelines.md

- title, description --> grammar, concise, can be modified to display better in the autogenerated docs for dev UI

# INFO field (info object)
- toS --> set up a doc for devs to refer to when using endpoints
**- version --> *SECURITY --> note that old versions of api assets should be deprecated and removed from the server otherwise any vulnerabilities they may have had will still be present in the server.

# SERVERS field (servers object) [default server object with url value '/']
example using variables field to configure server/server URL template substitution (REQUIRED - "default" field)
"servers": [
    {
      "url": "https://{username}.gigantic-server.com:{port}/{basePath}",
      "description": "The production API server",
      "variables": {
        "username": {
          "default": "demo",
          "description": "this value is assigned by the service provider, in this example `gigantic-server.com`"
        },
        "port": {
          "enum": [
            "8443",
            "443"
          ],
          "default": "8443"
        },
        "basePath": {
          "default": "v2"
        }
      }
    }
  ]

# PATHS field (paths object) - relative paths to endpoints + logic - path is appended to Servers URL. must begin with '/'.
$ref - allows for external definition
HEAD method == GET except server does not send msg body in response (i.e. only headers) used mainly for retrieving metadata of resource without needing to transfer a complete resource

✅ DO ensure that all HTTP methods are idempotent.
✔️ YOU SHOULD use PUT or PATCH to create a resource as these HTTP methods are easy to implement, allow the customer to name their own resource, and are idempotent.
✔️ YOU MAY use POST to create a resource but you must make it idempotent and, of course, the response MUST return the URL of the created resource with a 201-Created. One way to make POST idempotent is to use the Repeatability-Request-ID & Repeatability-First-Sent headers
✅ DO return a 204-No Content without a resource/body for a DELETE operation (even if the URL identifies a resource that does not exist; do not return 404-Not Found)
✅ DO return a 403-Forbidden when the user does not have access to the resource unless this would leak information about the existence of the resource that should not be revealed for security/privacy reasons, in which case the response should be 404-Not Found. [Rationale: a 403-Forbidden is easier to debug for customers, but should not be used if even admitting the existence of things could potentially leak customer secrets.]
✅ DO validate all query parameter and request header values and fail the operation with 400-Bad Request if any value fails validation. 
✔️ YOU MAY return secret fields via POST if absolutely necessary.
⛔ DO NOT return secret fields via GET. 
⛔ DO NOT add fields to the JSON if the value is easily computable from other fields to avoid bloating the body.




# COMPONENTS field (components object)
## holds set of reusable object which have no effect on API unless explicitly referenced
--> FIXED FIELDS: schemas, responses, parameters, examples, requestBodies, headers, securitySchemes, links, callbacks
	(field name examples: User, User_1, User_Name, user-name, my.org.User)
--> "$ref": "#/components/schemas/Example" / "Example.json" / "definitions.json#/Example"
--> schema validation https://datatracker.ietf.org/doc/html/draft-wright-json-schema-validation-00

# SECURITY field (security object)
## supported schemes == HTTP auth, API key (as header / cookie param /query param), OAuth2 (common flow == implicit, password, application, access code)
# TAGS field (tags object)
# EXTERNAL DOCS field (external docs object)